#!/usr/bin/env node

var eth = require('../eth');

function runHelp() {
  console.log([
    'Usage: eth [command] [arguments]',
    '',
    'Commands:',
    '  h, help     prints this message',
    '  v, version  prints eth\'s version',
    '  r, repl     starts the repl',
    '  e, eval     runs given file or code (TODO)',
    '  b, build    builds the given file (TODO use stdin)',
    '',
    'eth also works using stdin & stdout like so: eth <app.eth >app.js',
    '',
    'Documentation can be found at http://eth-lang.com'
  ].join('\n'));
  process.exit(1);
}

function runVersion() {
  var version = require('../package.json').version;
  console.log('eth version ' + version);
  process.exit(0);
}

function runRepl() {
  var context;

  function ethEval(code, env, filename, callback) {
    try {
      var compiledCode = eth.indent(eth.compile(code)).replace(
        /require\("eth\/core"\)/g, 'require("../core")');
      var result = require('vm').runInContext(compiledCode, context);
      callback(null, result);
    } catch(err) {
      callback(err);
    }
  }

  var repl = require('repl').start({
    prompt: 'eth> ',
    eval: ethEval
  });

  context = repl.context;
}

(function () {
  var commandName = process.argv[2];
  if (commandName === 'h' || commandName === 'help') {
    runHelp();
    return;
  }
  if (commandName === 'v' || commandName === 'version') {
    runVersion();
    return;
  }
  if (commandName === 'r' || commandName === 'repl') {
    runRepl();
    return;
  }

  // at this point we didn't handle any command let's ensure
  // we are not a tty and use stdin as input
  if (process.stdin.isTTY) {
    runHelp();
    return;
  }

  var chunks = [];
  process.stdin.setEncoding('utf-8');
  process.stdin.on('readable', function() {
    var chunk = process.stdin.read();
    if (chunk !== null) {
      chunks.push(chunk);
    }
  });
  process.stdin.on('end', function() {
      var body = chunks.join('');
      process.stdout.write(eth.indent(eth.compile(body)));
  });
})();
